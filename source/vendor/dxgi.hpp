#pragma once
#include <vendor/config.hpp>

#if USE_OFFICIAL_HEADERS
	#include <vendor/conflicts.hpp>
		// TODO...
	#include <vendor/conflicts.hpp>
#else
	#include <vendor/com.hpp>

	#define DXGI_USAGE_SHADER_INPUT 0x010
	#define DXGI_USAGE_RENDER_TARGET_OUTPUT 0x020
	#define DXGI_USAGE_BACK_BUFFER 0x040
	#define DXGI_USAGE_SHARED 0x080
	#define DXGI_USAGE_READ_ONLY 0x100
	#define DXGI_USAGE_DISCARD_ON_PRESENT 0x200
	#define DXGI_USAGE_UNORDERED_ACCESS 0x400

	#define DXGI_PRESENT_ALLOW_TEARING 0x200

	#define DXGI_MWA_NO_WINDOW_CHANGES (1 << 0)
	#define DXGI_MWA_NO_ALT_ENTER (1 << 1)

	enum DXGI_FORMAT
	{
		DXGI_FORMAT_UNKNOWN,
		DXGI_FORMAT_R32G32B32A32_TYPELESS,
		DXGI_FORMAT_R32G32B32A32_FLOAT,
		DXGI_FORMAT_R32G32B32A32_UINT,
		DXGI_FORMAT_R32G32B32A32_SINT,
		DXGI_FORMAT_R32G32B32_TYPELESS,
		DXGI_FORMAT_R32G32B32_FLOAT,
		DXGI_FORMAT_R32G32B32_UINT,
		DXGI_FORMAT_R32G32B32_SINT,
		DXGI_FORMAT_R16G16B16A16_TYPELESS,
		DXGI_FORMAT_R16G16B16A16_FLOAT,
		DXGI_FORMAT_R16G16B16A16_UNORM,
		DXGI_FORMAT_R16G16B16A16_UINT,
		DXGI_FORMAT_R16G16B16A16_SNORM,
		DXGI_FORMAT_R16G16B16A16_SINT,
		DXGI_FORMAT_R32G32_TYPELESS,
		DXGI_FORMAT_R32G32_FLOAT,
		DXGI_FORMAT_R32G32_UINT,
		DXGI_FORMAT_R32G32_SINT,
		DXGI_FORMAT_R32G8X24_TYPELESS,
		DXGI_FORMAT_D32_FLOAT_S8X24_UINT,
		DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS,
		DXGI_FORMAT_X32_TYPELESS_G8X24_UINT,
		DXGI_FORMAT_R10G10B10A2_TYPELESS,
		DXGI_FORMAT_R10G10B10A2_UNORM,
		DXGI_FORMAT_R10G10B10A2_UINT,
		DXGI_FORMAT_R11G11B10_FLOAT,
		DXGI_FORMAT_R8G8B8A8_TYPELESS,
		DXGI_FORMAT_R8G8B8A8_UNORM,
		DXGI_FORMAT_R8G8B8A8_UNORM_SRGB,
		DXGI_FORMAT_R8G8B8A8_UINT,
		DXGI_FORMAT_R8G8B8A8_SNORM,
		DXGI_FORMAT_R8G8B8A8_SINT,
		DXGI_FORMAT_R16G16_TYPELESS,
		DXGI_FORMAT_R16G16_FLOAT,
		DXGI_FORMAT_R16G16_UNORM,
		DXGI_FORMAT_R16G16_UINT,
		DXGI_FORMAT_R16G16_SNORM,
		DXGI_FORMAT_R16G16_SINT,
		DXGI_FORMAT_R32_TYPELESS,
		DXGI_FORMAT_D32_FLOAT,
		DXGI_FORMAT_R32_FLOAT,
		DXGI_FORMAT_R32_UINT,
		DXGI_FORMAT_R32_SINT,
		DXGI_FORMAT_R24G8_TYPELESS,
		DXGI_FORMAT_D24_UNORM_S8_UINT,
		DXGI_FORMAT_R24_UNORM_X8_TYPELESS,
		DXGI_FORMAT_X24_TYPELESS_G8_UINT,
		DXGI_FORMAT_R8G8_TYPELESS,
		DXGI_FORMAT_R8G8_UNORM,
		DXGI_FORMAT_R8G8_UINT,
		DXGI_FORMAT_R8G8_SNORM,
		DXGI_FORMAT_R8G8_SINT,
		DXGI_FORMAT_R16_TYPELESS,
		DXGI_FORMAT_R16_FLOAT,
		DXGI_FORMAT_D16_UNORM,
		DXGI_FORMAT_R16_UNORM,
		DXGI_FORMAT_R16_UINT,
		DXGI_FORMAT_R16_SNORM,
		DXGI_FORMAT_R16_SINT,
		DXGI_FORMAT_R8_TYPELESS,
		DXGI_FORMAT_R8_UNORM,
		DXGI_FORMAT_R8_UINT,
		DXGI_FORMAT_R8_SNORM,
		DXGI_FORMAT_R8_SINT,
		DXGI_FORMAT_A8_UNORM,
		DXGI_FORMAT_R1_UNORM,
		DXGI_FORMAT_R9G9B9E5_SHAREDEXP,
		DXGI_FORMAT_R8G8_B8G8_UNORM,
		DXGI_FORMAT_G8R8_G8B8_UNORM,
		DXGI_FORMAT_BC1_TYPELESS,
		DXGI_FORMAT_BC1_UNORM,
		DXGI_FORMAT_BC1_UNORM_SRGB,
		DXGI_FORMAT_BC2_TYPELESS,
		DXGI_FORMAT_BC2_UNORM,
		DXGI_FORMAT_BC2_UNORM_SRGB,
		DXGI_FORMAT_BC3_TYPELESS,
		DXGI_FORMAT_BC3_UNORM,
		DXGI_FORMAT_BC3_UNORM_SRGB,
		DXGI_FORMAT_BC4_TYPELESS,
		DXGI_FORMAT_BC4_UNORM,
		DXGI_FORMAT_BC4_SNORM,
		DXGI_FORMAT_BC5_TYPELESS,
		DXGI_FORMAT_BC5_UNORM,
		DXGI_FORMAT_BC5_SNORM,
		DXGI_FORMAT_B5G6R5_UNORM,
		DXGI_FORMAT_B5G5R5A1_UNORM,
		DXGI_FORMAT_B8G8R8A8_UNORM,
		DXGI_FORMAT_B8G8R8X8_UNORM,
		DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM,
		DXGI_FORMAT_B8G8R8A8_TYPELESS,
		DXGI_FORMAT_B8G8R8A8_UNORM_SRGB,
		DXGI_FORMAT_B8G8R8X8_TYPELESS,
		DXGI_FORMAT_B8G8R8X8_UNORM_SRGB,
		DXGI_FORMAT_BC6H_TYPELESS,
		DXGI_FORMAT_BC6H_UF16,
		DXGI_FORMAT_BC6H_SF16,
		DXGI_FORMAT_BC7_TYPELESS,
		DXGI_FORMAT_BC7_UNORM,
		DXGI_FORMAT_BC7_UNORM_SRGB,
		DXGI_FORMAT_AYUV,
		DXGI_FORMAT_Y410,
		DXGI_FORMAT_Y416,
		DXGI_FORMAT_NV12,
		DXGI_FORMAT_P010,
		DXGI_FORMAT_P016,
		DXGI_FORMAT_420_OPAQUE,
		DXGI_FORMAT_YUY2,
		DXGI_FORMAT_Y210,
		DXGI_FORMAT_Y216,
		DXGI_FORMAT_NV11,
		DXGI_FORMAT_AI44,
		DXGI_FORMAT_IA44,
		DXGI_FORMAT_P8,
		DXGI_FORMAT_A8P8,
		DXGI_FORMAT_B4G4R4A4_UNORM,
		DXGI_FORMAT_P208 = 130,
		DXGI_FORMAT_V208,
		DXGI_FORMAT_V408,
		DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE = 189,
		DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE,
		DXGI_FORMAT_FORCE_UINT = 0xFFFFFFFF,
	};

	enum DXGI_MODE_SCANLINE_ORDER
	{
		DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED,
		DXGI_MODE_SCANLINE_ORDER_PROGRESSIVE,
		DXGI_MODE_SCANLINE_ORDER_UPPER_FIELD_FIRST,
		DXGI_MODE_SCANLINE_ORDER_LOWER_FIELD_FIRST,
	};

	enum DXGI_MODE_SCALING
	{
		DXGI_MODE_SCALING_UNSPECIFIED,
		DXGI_MODE_SCALING_CENTERED,
		DXGI_MODE_SCALING_STRETCHED,
	};

	enum DXGI_SWAP_EFFECT
	{
		DXGI_SWAP_EFFECT_DISCARD,
		DXGI_SWAP_EFFECT_SEQUENTIAL,
		DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL = 3,
		DXGI_SWAP_EFFECT_FLIP_DISCARD,
	};

	enum DXGI_SWAP_CHAIN_FLAG
	{
		DXGI_SWAP_CHAIN_FLAG_FRAME_LATENCY_WAITABLE_OBJECT = 64,
		DXGI_SWAP_CHAIN_FLAG_ALLOW_TEARING = 2048,
	};

	enum D3D_FEATURE_LEVEL
	{
		D3D_FEATURE_LEVEL_1_0_CORE = 0x1000,
		D3D_FEATURE_LEVEL_9_1 = 0x9100,
		D3D_FEATURE_LEVEL_9_2 = 0x9200,
		D3D_FEATURE_LEVEL_9_3 = 0x9300,
		D3D_FEATURE_LEVEL_10_0 = 0xA000,
		D3D_FEATURE_LEVEL_10_1 = 0xA100,
		D3D_FEATURE_LEVEL_11_0 = 0xB000,
		D3D_FEATURE_LEVEL_11_1 = 0xB100,
		D3D_FEATURE_LEVEL_12_0 = 0xC000,
		D3D_FEATURE_LEVEL_12_1 = 0xC100,
	};

	using DXGI_USAGE = UINT;

	struct IDXGIOutput;
	struct IDXGIAdapter;
	struct IDXGIAdapter1;
	struct DXGI_FRAME_STATISTICS;
	struct DXGI_SWAP_CHAIN_DESC1;
	struct DXGI_SWAP_CHAIN_FULLSCREEN_DESC;
	struct DXGI_MODE_ROTATION;
	struct DXGI_RGBA;

	struct DXGI_RATIONAL
	{
		UINT Numerator;
		UINT Denominator;
	};

	struct DXGI_MODE_DESC
	{
		UINT Width;
		UINT Height;
		DXGI_RATIONAL RefreshRate;
		DXGI_FORMAT Format;
		DXGI_MODE_SCANLINE_ORDER ScanlineOrdering;
		DXGI_MODE_SCALING Scaling;
	};

	struct DXGI_SAMPLE_DESC
	{
		UINT Count;
		UINT Quality;
	};

	struct DXGI_SWAP_CHAIN_DESC
	{
		DXGI_MODE_DESC BufferDesc;
		DXGI_SAMPLE_DESC SampleDesc;
		DXGI_USAGE BufferUsage;
		UINT BufferCount;
		HWND OutputWindow;
		BOOL Windowed;
		DXGI_SWAP_EFFECT SwapEffect;
		UINT Flags;
	};

	struct DXGI_PRESENT_PARAMETERS
	{
		UINT DirtyRectsCount;
		RECT *pDirtyRects;
		RECT *pScrollRect;
		POINT *pScrollOffset;
	};

	MIDL_INTERFACE IDXGIObject : IUnknown
	{
		virtual HRESULT STD_CALL SetPrivateData(const GUID &, UINT, const void *) = 0;
		virtual HRESULT STD_CALL SetPrivateDataInterface(const GUID &, const IUnknown *) = 0;
		virtual HRESULT STD_CALL GetPrivateData(const GUID &, UINT *, void *) = 0;
		virtual HRESULT STD_CALL GetParent(const GUID &, void **) = 0;
	};

	MIDL_INTERFACE IDXGIDeviceSubObject : IDXGIObject
	{
		virtual HRESULT STD_CALL GetDevice(const GUID &, void **) = 0;
	};

	MIDL_INTERFACE IDXGISwapChain : IDXGIDeviceSubObject
	{
		virtual HRESULT STD_CALL Present(UINT, UINT) = 0;
		virtual HRESULT STD_CALL GetBuffer(UINT, const GUID &, void **) = 0;
		virtual HRESULT STD_CALL SetFullscreenState(BOOL, IDXGIOutput *) = 0;
		virtual HRESULT STD_CALL GetFullscreenState(BOOL *, IDXGIOutput **) = 0;
		virtual HRESULT STD_CALL GetDesc(DXGI_SWAP_CHAIN_DESC *) = 0;
		virtual HRESULT STD_CALL ResizeBuffers(UINT, UINT, UINT, DXGI_FORMAT, UINT) = 0;
		virtual HRESULT STD_CALL ResizeTarget(const DXGI_MODE_DESC *) = 0;
		virtual HRESULT STD_CALL GetContainingOutput(IDXGIOutput **) = 0;
		virtual HRESULT STD_CALL GetFrameStatistics(DXGI_FRAME_STATISTICS *) = 0;
		virtual HRESULT STD_CALL GetLastPresentCount(UINT *) = 0;
	};

	MIDL_INTERFACE IDXGISwapChain1 : IDXGISwapChain
	{
		virtual HRESULT STD_CALL GetDesc1(DXGI_SWAP_CHAIN_DESC1 *) = 0;
		virtual HRESULT STD_CALL GetFullscreenDesc(DXGI_SWAP_CHAIN_FULLSCREEN_DESC *) = 0;
		virtual HRESULT STD_CALL GetHwnd(HWND *) = 0;
		virtual HRESULT STD_CALL GetCoreWindow(const GUID &, void **) = 0;
		virtual HRESULT STD_CALL Present1(UINT, UINT, const DXGI_PRESENT_PARAMETERS *) = 0;
		virtual BOOL STD_CALL IsTemporaryMonoSupported() = 0;
		virtual HRESULT STD_CALL GetRestrictToOutput(IDXGIOutput **) = 0;
		virtual HRESULT STD_CALL SetBackgroundColor(const DXGI_RGBA *) = 0;
		virtual HRESULT STD_CALL GetBackgroundColor(DXGI_RGBA *) = 0;
		virtual HRESULT STD_CALL SetRotation(DXGI_MODE_ROTATION) = 0;
		virtual HRESULT STD_CALL GetRotation(DXGI_MODE_ROTATION *) = 0;
	};

	MIDL_INTERFACE IDXGIFactory : IDXGIObject
	{
		virtual HRESULT STD_CALL EnumAdapters(UINT, IDXGIAdapter **) = 0;
		virtual HRESULT STD_CALL MakeWindowAssociation(HWND, UINT) = 0;
		virtual HRESULT STD_CALL GetWindowAssociation(HWND *) = 0;
		virtual HRESULT STD_CALL CreateSwapChain(IUnknown *, DXGI_SWAP_CHAIN_DESC *, IDXGISwapChain **) = 0;
		virtual HRESULT STD_CALL CreateSoftwareAdapter(HMODULE, IDXGIAdapter **) = 0;
	};

	MIDL_INTERFACE IDXGIFactory1 : IDXGIFactory
	{
		virtual HRESULT STD_CALL EnumAdapters1(UINT, IDXGIAdapter1 **) = 0;
		virtual BOOL STD_CALL IsCurrent() = 0;
	};

	extern "C" DLL_IMPORT  HRESULT STD_CALL CreateDXGIFactory(const GUID &, void **);
#endif